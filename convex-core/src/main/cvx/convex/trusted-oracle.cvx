'convex.trusted-oracle


(call *registry*
      (register {:description ["A simple oracle actor that depends on a trusted set of addresses who may provide results."
                               "A key is first registered using `register`. When ready, a result for that key is provided using `provide`."
                               "Consumer can see details about keys in `*list*` and, when finalized, see results in `*results*`."]
                 :name        "Trusted oracle actor"}))


;;;;;;;;;; Values

(def *list*

  ;; Map of `key` -> `arbitrary map describing an oracle`.

  ^{:private? true}

  {})

(def *results*

  ;; Map of `key` -> `result`.

  ^{:private? true}

  {})

;;;;;;;;;; Callable functions


(defn data

  ^{:callable? true
    :doc       {:description "Returns data registered for `key`."
                :signature   [{:params [key]}]}}

  [key]

  (*list* key))



(defn finalized?

  ^{:callable? true
    :doc       {:description "Returns a boolean indicating if a results has been provided for `key`."
                :signature   [{:params [key]}]}}

  [key]

  (contains-key? *results*
                 key))



(defn read

  ^{:callable? true
    :doc       {:description "Returns the result for `key`."
                :signature   [{:params [key]}]}}

  [key]

  (*results* key))



(defn register

  ^{:callable? true
    :doc       {:description ["Callable function for registering a new oracle key."
                              "Returns true if successful, false if key already exists."
                              "Data should be a map containg at least `:trust`, a set of addresses trusted for using `provide` on that key."
                              "Without `:trust`, a result cannot be delivered."]
                :signature   [{:params [key data]}]}}

  [key data]

  (if (contains-key? *list*
                     key)
    false
    (do 
      (def *list*
           (assoc *list*
                  key
                  data))
      true)))



(defn provide

  ^{:callable? true
    :doc       {:description ["Provides a result for a key registered using `register`."
                              "Does not change anything if a resulted has already been provided for that key."
                              "Returns the result associated with that key."]
                :errors      {:STATE "When key does not exist"
                              :TRUST "When caller is untrusted"}
                :signature   [{:params [key value]}]}}

  [key value]

  (cond
    (not (*list* key))
    (fail :STATE
          (str "Unknown oracle key: "
               key))

    (not (get-in *list*
                 [key
                  :trust
                  *caller*]))
    (fail :TRUST
          "Untrusted caller")

    (contains-key? *results*
                   key)
    (*results* key)

    :else
    (do
      (def *results*
           (assoc *results*
                  key
                  value))
      value)))
