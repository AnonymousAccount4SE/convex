;;
;;
;; Core definitions executed as part of core runtime environment bootstrap, supplementing utilities defined in Java.
;;
;; First are defined core building blocks which must be kept at the beginning of the file. Order matters!
;; Then is defined the rest of the API in alphabetical order.
;;
;;


;;;;;;;;;; Values


(def *lang*

  ^{:doc {:description "The current language font-end function. If set to a function in the environment, this function will be called with the input form during evaluation insteand of the normal `eval` behaviour. Pre-compiled ops bypass this language setting."
          :examples    [{:code "(def *lang* (fn [code] (str code)))"}]}}

  nil)




(def *registry*

  ^{:doc {:description "The address of the Convex registry Actor."
          :examples    [{:code "(call *registry* (register {:name \"My name\"}))"}]}}

  (address 9))


;;;;;;;;;; Expanders, creating macros and defining functions


(def defexpander

  ^{:doc      {:description "Defines an expander in the current environment."
               :examples    [{:code "(defexpander expand-once [x e] (e x (fn [x e] x)))"}]
               :signature   [{:params [a]}]}
    :expander true}

  (fn [x e]
    (let [[_
           name
           & decl] x
          exp      (cons 'fn
                         decl)
          form     `(def ~(syntax name
                                  {:expander true})
                         ~exp)]
      (e form
         e))))



(def defmacro

  ^{:doc      {:description "Defines a macro in the current environment. A macro is a special function that is executed at compile time, and produces valid Convex Lisp code for subsequent execution."
               :examples    [{:code "(defmacro foo [x] '(if (good? x) x (fix x)))"}]
               :signature   [{:params [name params & body]}]}
    :expander true}

  (fn [x e]
    (let [[_
           name
           & decl] x
          mac      (cons 'fn
                         decl)
          mmeta    (meta (first decl))
          form     `(def ~(syntax name
                                  (merge mmeta
                                         {:expander true}))
                      (let [m# ~mac]
                        (fn [x e]
                          (e (apply m#
                                    (next x))
                             e))))]
      (e form
         e))))



(defmacro defn

  ^{:doc {:description "Defines a function in the current environment."
          :examples    [{:code "(defn my-square [x] (* x x))"}]
          :signature   [{:params [name params & body]}
                        {:params [name & fn-decls]}]}}

  [name & decl]

  (let [fnform (cons 'fn
                     decl)
        _      (cond
                 (empty? decl)
                 (fail :ARITY
                       "`defn` requires at lest one function definition"))
        fst    (first decl)
        name   (cond
                 (syntax fst)
                 (syntax name
                         (meta fst))

                 name)]
    `(def ~name
          ~fnform)))



(defmacro macro

  ^{:doc      {:description "Creates an anonymous macro function, suitable for use as an expander."
               :examples    [{:code "(macro [x] (if x :foo :bar))"}]
               :signature   [{:params [params & body]}]}
    :expander true}

  [& decl]

  (let [mac  (cons 'fn
                   decl)
        form `(let [m# ~mac]
                (fn [x e]
                  (e (apply m#
                            (next (unsyntax x)))
                     e)))]
    form))


;;;;;;;;;; Logic


(defmacro and

  ^{:doc {:description "Executes expressions in sequence, returning the first falsey value, or the last value if all were truthy. Does not evaluate later expressions, so can be used to short circuit execution. Returns true with no expressions present."
          :examples    [{:code "(and 1 2)"}]
          :signature   [{:params [& exprs]}]}}

  [& exprs]

  (let [n (count exprs)]
    (cond
      (== n 0) true
      (== n 1) (first exprs)
      :else    `(let [v# ~(first exprs)]
                  (cond v#
                    ~(cons 'and
                           (next exprs))
                    v#)))))



(defmacro or

  ^{:doc {:description "Executes expressions in sequence, returning the first truthy value, or the last value if all were falsey. Does not evaluate later expressions, so can be used to short circuit execution. Returns nil with no expressions present."
          :examples    [{:code "(or nil 1)"}]
          :signature   [{:params [& exprs]}]}}

  [& exprs]

  (let [n (count exprs)]
    (cond
      (== n 0) nil
      (== n 1) (first exprs)
      :else    `(let [v# ~(first exprs)]
                  (cond
                    v#
                    v#
                    ~(cons 'or
                           (next exprs)))))))


;;;;;;;;;; `cond` variants


(defmacro if

  ^{:doc      {:description "Calculates the value of a test expression, then branches and returns the result of the true expression or false expression depending on whether the test expression is true or false respectively. The values 'false' and 'nil' are considered flase, all other values are true. Performs short-circuit evaluation, i.e. the expression in the unused branch is not evaluated. If the false branch is omitted, it will be assumed to evaluate to 'nil'. For a more general conditional expression that can handle multiple branches, consider 'cond' as an alternative."
              :examples     [{:code "(if true :true-value :false-value)"}]
              :signature    [{:params [test true-exp]}
                             {:params [test true-exp false-exp]}]}
    :expander true}

  [test & cases]

  (cond (<= 1
            (count cases)
            2)
   nil
   (fail :ARITY
         "`if` requires 2 or 3 arguments"))
  (cons 'cond
        test
        cases))



(defmacro if-let

  ^{:doc {:description "Binds a symbol to the result of evaluating a given expression, and executes a true expression or false expression depending on the result in the same manner as 'if'"
          :examples    [{:code "(if-let [addr  (get-address)] (transfer addr 1000))"}]
          :signature   [{:params [[sym exp] & branches]}] }}

  [[sym exp] & branches]

  `(let [~sym ~exp]
     ~(cons 'if
            sym
            branches)))



(defmacro when

  ^{:doc {:description "Executes body expressions in an implicit do block if af and only if the test expression evaluates to a truthy value."
          :examples    [{:code "(when (some-condition) (rollback :this-went-wrong))"}]
          :signature   [{:params [test & body]}]}}

  [test & body]

  `(cond
     ~test
     ~(cons 'do
            body)
     nil))



(defmacro when-let

  ^{:doc {:description "Executes the body with the symbol bound to the value of evaluating a given expression, if and only if the result of the expression is truthy. Returns nil otherwise."
          :examples    [{:code "(when-let [addr  (get-address)] (transfer addr 1000))"}]
          :signature   [{:params [[sym exp] & body]}]}}

  [[sym exp] & body]

  (let [dobody (cons 'do
                     body)]
    `(let [~sym ~exp]
       (if ~sym
         ~dobody
         nil))))



(defmacro when-not

   ^{:doc {:description "Executes body expressions in an implicit do block if af and only if the test expression evaluates to a falsey value."
         :examples [{:code "(when-not (some-condition) (return :some-result))"}]
         :type :macro
         :signature [{:params [test & body]}]}}

  [test & body]

  `(cond
     ~test
     nil
     ~(cons 'do
            body)))


;;;;;;;;;; Rest of the API


(defn account?

  ^{:doc {:description "Tests if the given Address refers to a valid existing acount (which may be either an Actor or User account). Returns false for any non-Address argument, or any Address that does not refer to a currently existing Account."
          :examples    [{:code "(account? *caller*)"}]
          :signature   [{:params [address]
                         :return Boolean}]}}

  [addr]

  (cond
    (address? addr)
    (boolean (account addr))
    false))



(defmacro actor

  ^{:doc {:description "Creates an actor generation function. This function generates depolyable code when called, and may take optional arguments to configure the deployed actor. The resulting code can be used with either 'deploy' or 'deploy-once'."
          :examples    [{:code "(let [agf (actor [x] (defn calc [y] (* x y)) (export calc))] (deploy (agf 13)))"}]
          :signature   [{:params [name params & body]}]}}

  [params & body]

  (let [bindlist (reduce (fn [v p]
                           (conj v
                                 p
                                 (list 'unquote
                                        p)))
                         []
                         params)
        code     (list 'quasiquote
                       (cons 'let
                             bindlist
                             body))]
    `(fn ~params
         ~code)))


(defn actor?

  ^{:doc {:description "Tests if the given Address refers to an Actor. Argument must be a valid Address."
          :examples    [{:code "(actor? #1345)"}]
          :signature   [{:params [address]
                         :return Boolean}]}}

  [addr]

  (cond
    (address? addr)
    (let [act (account addr)]
      (cond act
        (nil? (:key act))
        false))
    false))



(defmacro assert

  ^{:doc {:description "Evaluates each test, and raises an ASSERT error if any are not truthy."
          :examples    [{:code "(assert (= owner *caller*))"}]
          :signature   [{:params [& tests]}]}}

  [& tests]
 
  (cons 'do
        (map (fn [test]
               `(cond
                  ~test
                  nil
                  (fail :ASSERT
                        ~(str "Assert failed: "
                              (str test)))))
             tests)))



(defmacro call

  ^{:doc {:description "Calls an function in another Account. The specified address must be valid, and refer to an existing account. offer is optional, if provided must cast to Long. call-form must be a valid expression calling an exported function in the target Account."
          :errors      {:ARGUMENT "If the offer is negative."
                        :ARITY    "If the supplied arguments are the wrong arity for the called function."
                        :CAST     "If the address argument is an Address, the offer is not a Long, or the function name is not a Symbol."
                        :STATE    "If the address does not refer to an Account with the callable function specified by fn-name."}
          :examples    [{:code "(call some-contract 1000 (contract-fn arg1 arg2))"}]
          :signature   [{:params [address call-form]
                         :return Any}
                        {:params [address offer call-form]
                         :return Any}]}}

  [addr & more]

  (let [addr (unsyntax addr)]
      (if (empty? more)
        (fail :ARITY
              "Insufficient arguments to call"))
      (let [n      (count more)
            fnargs (unsyntax (last more))
            _      (or (list? fnargs)
                       (fail :COMPILE
                             "`call` must have function call list form as last argument."))
            sym    (unsyntax (first fnargs))
            fnlist (cons (list 'quote
                               sym)
                         (next fnargs))]
        (cond
          (== n 1) (cons 'call*
                         addr
                         0
                         fnlist)
          (== n 2) (cons 'call*
                         addr
                         (first more)
                         fnlist)))))



(defn comp

   ^{:doc {:description "Composes a sequence of functions, returning a function that is the composition of these functions. The rightmost function may take a variable number of arguments. The other functions will be passed a single argument (the result of the next function to the right)"
           :examples    [{:code "((comp inc inc) 1)"}]
           :signature   [{:params [f & more]
                          :return Function}]}}


  ([f]

   f)


  ([f g]

   (fn [& args]
     (f (apply g
               args))))


  ([f g h]

   (fn [& args]
     (f (g (apply h
                  args)))))


  ([f g h & more]

   (apply comp
          (fn [x]
            (f (g (h x))))
          more)))



(defn create-account

  ^{:doc {:description "Creates an account with the specified account public key. Returns the Address of the newly created Account."
          :errors      {:CAST "If the argument is not a Blob key value."}
          :examples    [{:code "(create-account 0x817934590c058ee5b7f1265053eeb4cf77b869e14c33e7f85b2babc85d672bbc)"}]
          :signature   [{:params [key]
                         :return Address}]}}

  [key]

  (or (blob? key)
      (fail :CAST
            "create-account requires a non-nil Blob key"))
  (deploy `(set-key ~key)))



(defmacro defactor

  ^{:doc {:description "Defines an actor generation function in the environment. See 'actor' for more details on actor generation functions."
          :examples    [{:code "(defactor multiply-actor [x] (defn calc [y] (* x y)) (export calc))"}]
          :signature   [{:params [name params & body]}]}}

  [name params & body]

  (let [actr (cons 'actor
                   params
                   body)]
    `(def ~name
          ~actr)))



(defmacro defined?

   ^{:doc {:description "Tests if a given symbol name is defined in the current environment."
           :examples    [{:code "(defined? defined?)"}]
           :signature   [{:params [sym]}]}}

  [sym]

  (or (symbol? sym)
      (fail :CAST
            "defined? requires a Symbol"))
  `(boolean (lookup-meta (quote ~sym))))



(defmacro doc

  ^{:doc {:description "Returns the documentation for a given definition."
          :examples    [{:code "(doc count)"}]
          :signature   [{:params [sym]}]}}

  [sym]

  `(:doc (lookup-meta (quote ~sym))))



(defmacro dotimes

  ^{:doc {:description "Repeats execution of the body 'count' times, binding the specified symbol from 0 to (count-1) on successive iterations. Returns nil in all cases."
          :examples    [{:code "(dotimes [i 10] (transfer *address* 10))"}]
          :signature   [{:params [[sym count] & body]}] }}

  [[sym count] & body]

  (let [n   (long count)
        sym (if (symbol? (unsyntax sym))
              sym
              (fail :CAST
                    "`dotimes` requires a symbol for loop binding"))]
    `(loop [~sym 0]
       (if (< ~sym
              ~n)
         (do
           ~(cons do
                  body)
           (recur (inc ~sym)))
         nil))))



(defmacro export

  ^{:doc {:description "Exports symbols from the current actor. Exported symbols may be called by external parties. It is advised to carefully audit the security of usages of this function: normally, an actor's deployment code should have a single export statement that exports functions that have been validated as safe and intended to provide a public API to the actor."
          :examples    [{:code "(export some-safe-function)"}]
          :signature   [{:params [& symbols]}]}}

  [& syms]

  (cons 'do
        (map (fn [sym]
               (or (symbol? sym)
                   (fail :CAST
                         (str "Not a symbol: " sym)))
               `(eval (list 'def
                            (quote ~sym)
                            (syntax ~sym
                                    (assoc (lookup-meta (quote ~sym))
                                           :callable?
                                           true)))))
             syms)))



(defn filter

   ^{:doc {:description "Filters a collection by applying the given predicate to each element, and including it in the new collection if and only if the predicate returns true."
           :errors      {:CAST "If the coll argeument is not a Data Structure."}
           :examples    [{:code "(filter (fn [x] (> 2 x)) [1 2 3 4])"}]
           :signature   [{:params [key]
                          :return Address}]}}

  [pred coll]

  (reduce (fn [acc e]
            (cond (pred e)
              (conj acc
                    e)
              acc))
          (empty coll)
          ;; Lists must be reversed so that elements are conjed in the correct order.
          ;;
          (cond (list? coll)
            (reverse coll)
            coll)))



(defmacro for

  ^{:doc {:description "Executes the body with the symbol 'sym' bound to each value of the given sequence. Returns a vector of results."
          :examples [{:code "(for [x [1 2 3]] (inc x))"}]
          :signature [{:params [[sym sequence] & body]}] }}

  [[sym sequence] & body]

  `(map ~(cons 'fn 
               (vector sym)
               body)
        (vec ~sequence)))



(defn identity

  ^{:doc {:description "An identity function which returns a single argument unchanged. Most useful when you want a 'do nothing' operation in higher order functions."
          :examples    [{:code "(identity :foo)"}
                        {:code "(map identity [1 2 3])"}]
          :signature   [{:params [x]}]}}

  [x]

  x)



(defmacro import

  ^{:doc {:description "Import a library for use in the current environment. Creates an alias to the library so that symbols defined in the library can be addressed directly in the form 'alias/symbol-name'. Returns the Address of the imported account."
          :examples    [{:code "(import some.library :as alias)"}]
          :signature   [{:params [& args]}]}}

  [addr as sym]

  (let [code (cond (symbol? addr)
               `(or (call* *registry*
                           0
                           'cns-resolve
                           (quote ~addr))
                    (fail :NOBODY
                          (str "Could not resolve library name for import: "
                               (quote ~addr))))
               `(address ~addr))
        sym  (cond (symbol? sym)
               sym
               (fail "import: alias must be a symbol"))]
    (assert (= :as
               as))
    `(def ~sym
          ~code)))



(defn mapcat

  ^{:doc {:description "Maps a funcion across the given collections, then concatenates the results. nil is treated as an empty collection."
          :examples    [{:code "(mapcat vector [:foo :bar :baz] [1 2 3])"}]
          :signature   [{:params [test & body]}]}}

  [f coll & more]

  (apply concat
         (empty coll)
         (apply map
                f
                coll
                more)))



(defn mapv

  ^{:doc {:description "Maps a function over the given collections as with map, and returns the resturn as a vector."
          :examples    [{:code "(mapv inc '(1 2 3))"}]
          :signature   [{:params [f & colls] }]}}

  [f & colls]

  (vec (apply map
              f
              colls)))



(defn max

  ^{:doc {:description "Returns the numerical maximum of the given values."
          :examples    [{:code "(max 1 2 3)"}]
          :signature   [{:params [& numbers]}]}}

  [fst & more]

  (let [n (count more)]
    (loop [m (+ fst
                0)  ;; Adds zero to ensure number.
           i 0]
      (cond (>= i
                n)
        m
        (let [v (nth more i)]
          (and (nan? v)
               (return v))
          (recur (cond (> v
                          m)
                   v
                   m)
                 (inc i)))))))



(defn min

  ^{:doc {:description "Returns the numerical minimum of the given values."
          :examples    [{:code "(min 1 2 3)"}]
          :signature   [{:params [& vals]}]}}

  [fst & more]
  (let [n (count more)]
    (loop [m (+ fst 0)
           i 0]        ;; Adds zero to ensure number.
      (cond (>= i
                n)
        m
        (let [v (nth more
                     i)]
          (and (nan? v)
               (return v))
          (recur (cond (< v
                          m)
                   v
                   m)
                 (inc i)))))))



(defmacro schedule

  ^{:doc {:description "Schedules code for future execution under this account. Expands and compiles code now, but does not execute until the specified timestamp."
          :examples    [{:code "(schedule (+ *timestamp* 1000) (transfer my-friend 1000000))"}]
          :signature   [{:params [timestamp code]}] }}

  [timestamp code]

  `(schedule* ~timestamp
              (compile ~(list 'quote
                              code))))



(defmacro tailcall

   ^{:doc {:description "Calls a function as a tail call. Will return from the current function with the result of the tail call, without consuming additional stack depth."
           :examples    [{:code "(tailcall (some-function 1 2 3))"}]
           :signature   [{:params [[f & args]] }]}}

  [callspec]

  (let []
    (or (list? callspec)
        (fail :ARGUMENT
              "Tailcall requires a list representing function invocation"))
    (let [n (count callspec)]
    (cond (== n
              0)
      (fail :ARGUMENT
            "Tailcall requires at least a function argument in call list"))
      (cons 'tailcall*
            callspec))))



(defmacro undef

  ^{:doc {:description "Undefines a symbol, removing the mapping from the current environment if it exists."
          :examples    [{:code "(do (def foo 1) (undef foo))"}]
          :signature   [{:params [sym]}]}}

  [sym]

  `(undef* ~(list 'quote
                  sym)))
