'convex.did

;; This is an implementation of the W3C DID specification for a Verifiable Data Registry on Convex
;; The required methods are Create, Read, Update and Deactivate

(import convex.trust :as trust)

;; A map of ID to [ddo-document controller created updated]
(def dids {})

(def counter 1)

(defn 
  ^{:callable? true
    :doc       {:description "Gets a DID document for a given account. Returns nil if ID is invalid or DDO does not exist."
                :signature   [{:params [addr]}]}}
  read
  [id]
  (if-let [rec (get dids id)]
    (nth rec 0)))

(defn 
  ^{:callable? true
    :doc       {:description "Creates a new DID. Controller will be caller unless otherwise specified."
                :signature   [{:params []}
                              {:params [controller]}]}}
  create
  ([]
    (recur *caller*))
  ([controller]
    (let [id counter
          controller (address controller)
          rec ["" controller *timestamp* *timestamp*]]
      (def dids (assoc dids id rec))
      (def counter (inc counter))
      id)))

(defn 
  ^{:callable? true
    :doc       {:description "Updates a DDO for a DID."
                :signature   [{:params [id ddo]}]}}
  update
 ([id ddo]
   (assert (or (nil? ddo) (str? ddo)))
     (let [rec (get dids id)
           _ (or rec (error "Invalid DID"))
           cont (get rec 1)
           _ (or (trust/trusted? cont *caller* :update id) (error "Unauthorised"))
           rec (assoc rec 0 ddo)         ;; update DDO
           rec (assoc rec 3 *timestamp*) ;; update timestamp
           ]
       (def dids (assoc dids id rec))
       rec)))

(defn 
  ^{:callable? true
    :doc       {:description "Deactivates a DID."
                :signature   [{:params [id]}]}}
  deactivate
  ([id]
    (update id nil)))