'convex.registry

(set-holding *address*
             {:description ["Actor hosting a registry for resolving arbitrary symbols to addresses."
                            "Typically, actors and libraries are registered so that they can be retrieved and consumed using standard `import`."
                            "Each record in the registry has a controller that can update that record in any way."
                            "A controller is an address or, more speficially, a trust monitor as described in `convex.trust`."
                            "This actor also provides a standard way for adding metadata to an address."]
              :name        "Convex Name Service"})


;;
;;
;; Deployed by default during network initialisation at a well-known address.
;; Initialization takes care of registering this registry alongside other actors and libraries.
;;
;; This make it accessible from early in network bootstrap as a way to register and locate Accounts.
;;
;;


;;;;;;;;;; Values


(def cns.database

  ^{:private? true}

  ;; Map of `symbol` -> `[address-target address-controller]`.

  {})



(def trust

  ^{:private? true}

  ;; Address of the `convex.trust`, it is deployed right after this account, hence it is predictable.

  (address (inc (long *address*))))


;;;;;;;;;; Metadata


(defn -meta.get

  ^{:callable? true
    :private?  true}

  [addr]

  (get-holding addr))



(defn meta.get

  ^{:doc {:description "Returns metadata for the given address."
          :examples    [{:code "(*registry*/meta.get #8"}]
          :signature   [{:params [address]}]}}

  [addr]

  (call ~*address*
        (-meta.get addr)))



(defn -meta.set

  ^{:callable? true
    :private?  true}

  [data]

  (set-holding *caller*
               data))



(defn meta.set

  ^{:doc {:description ["Registers metadata for the calling account. Metadata can be an arbitrary value, but by convention is a map with defined fields."
                        "Stored in `*holdings*` of the calling account."]
          :examples    [{:code "(*registry*/meta.set {:description \"Does stuff.\", :name \"My name\"})"}]
          :signature   [{:params [metadata]}]}}

  [metadata]

  (call ~*address*
        (-meta.set metadata)))


;;;;;;;;;; Callable API - Convex Name Service


(defn -cns.control

  ^{:callable? true
    :private?  true}

  [name addr]

  (let [record (get cns.database
                    name)]
   (when (nil? record)
     (fail :STATE
           "CNS record does not exist"))
   (when (not (trust/trusted? (second record)
                              *caller*))
     (fail :TRUST
           "Caller is not trusted with transferring control for that CNS record"))
    (def cns.database
         (assoc cns.database
                name
                (assoc record
                       1
                       addr)))))



(defn cns.control

  ^{:doc {:description "Updates a CNS name mapping to set a new controller. May only be peformed by a current controller."
          :examples    [{:code "(*registry*/cns.control 'my.actor.name trust-monitor-address)"}]
          :signature   [{:params [name address]}]}}

  [name addr]

  (call ~*address*
        (-cns.control name
		              addr)))



(defn -cns.resolve

  ^{:callable? true
    :private?  true}

  [name]

  (assert (symbol? name))
  (when-let [record (get cns.database
                         name)]
    (first record)))



(defn cns.resolve

  ^{:doc {:description "Resolves a name in the Convex Name Service."
          :examples    [{:code "(*registry*/cns.resolve 'convex.registry)"}]
          :signature   [{:params [name]}]}}

  [name]

  (call ~*address*
        (-cns.resolve name)))



(defn -cns.update

  ^{:callable? true
    :private?  true}

  [name addr]

  (let [record (get cns.database
                    name)]
    (when (and record
               (not (trust/trusted? (second record)
                                    *caller*)))
      (fail :TRUST
            "Caller is not trusted with updating the requested CNS record"))
    (def cns.database
         (assoc cns.database
                name
                [addr
                 *caller*]))))



(defn cns.update

  ^{:doc {:description "Updates or adds a name mapping in the Convex Name Service. Only the trusted controller of a CNS record may update the mapping for an existing name."
          :examples    [{:code "(*registry*/cns.update 'my.actor.name new-addr)"}]
          :signature   [{:params [name address]}]}}

  [name addr]

  (call ~*address*
        (-cns.update name
		             addr)))
