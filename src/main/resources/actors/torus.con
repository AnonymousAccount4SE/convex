(do
  ;; Torus library 
  ;;
  ;; deploy with: (deploy-once torus-code)
  ;; 
  ;; import with (import <address of fungible> :as fungible)
  ;;
  ;; Key usage:
  ;;   (torus/build-market config)                  ;; Builds code for a Torus CVX/Token pair
  ;;   (torus/factory token-address)                ;; Gets or deploys the canonical pair for a token

  
  (call *registry* (register {:name "Torus Exchange Library"}))
  
  (import convex.trust :as trust)
  (import convex.fungible :as fungible)

  
  ;; BlobMap of token addresses to market Actor addresses
  (def markets (blob-map))
  
  (defn get-market 
    ^{:doc {:description "Gets the canonical market for a token. Returns nil if the market does not exist."
         :examples [{:code "(deploy-once (build-market {:token token-address}))"}]
         :type :function
         :signature [{:params [config]}]}
	  }
    [token]
    (get markets token))
  
  (defn create-market
    ^{:doc {:description "Gets the canonical market for a token. Returns nil if the market does not exist."
         :examples [{:code "(deploy-once (build-market {:token token-address}))"}]
         :type :function
         :signature [{:params [config]}]}
	  }
    ([token] 
      (let [existing-market (get markets token)]
        (if existing-market (return existing-market))
        (let [token (address token)
              code (build-market token *address*)
              market (deploy code)
              ]
          (def markets (assoc markets token market))
          market))))
  
  (defn build-market
    ^{:doc {:description "Creates deployable code for a new Torus token market"
         :examples [{:code "(deploy-once (build-market {:token token-address}))"}]
         :type :function
         :signature [{:params [config]}]}
	  }
    [token torus]
    (let []
      [;; start with code for a basic fungible token, with zero supply.
       (fungible/build-token {:supply 0})
       
       ;; Add code for market functionality
      '(do
         (import convex.asset :as asset)
         (import convex.core :as core)
         
         (def token ~token)
         (def torus ~torus)
         
         (def token-balance 0)
         
         (defn calc-rate []
           ;; TODO: have vairable rate set by torus and/or trade velocity
           ;; Maybe BASE_FEE / 1 + (THROUGHPUT / LIQUIDITY) ?
           0.001)
         
         ;; price is convex amount per token, or nil if there are no tokens in liquidity pool
         (defn price []
           (if (> token-balance 0) (/ (double *balance*) token-balance)))
         
         (defn add-liquidity [amt]
           (let [amt (long amt)                                        ;; amount of tokens deposited
                 price (price)                                         ;; price of token in CVX, nil if no current liquidity
                 initial-cvx-balance *balance*                         ;; initial CVX balance
                 cvx (core/accept (if price (* price amt) *offer*))    ;; amount of CVX deposited
                 _ (asset/accept *caller* [token (long amt)])          ;; ensure tokens are transferred from caller to market actor
                 
                 ;; compute new total balances for actor
                 new-token-balance (+ token-balance amt)
                 
                 ;; compute number of new shares for depositor = increase in liquidity (%) * current total shares
                 ;; if no current liquidity just initialise with the amount deposited
                 delta (if (> supply 0)
                         (let [liquidity (sqrt (* (double initial-cvx-balance) token-balance)) ;; initial size of liquidity pool (geomentric mean)
                               new-liquidity (sqrt (* (double *balance*) new-token-balance))]
                           (long (* (- new-liquidity liquidity) (/ supply liquidity))))
                         (long amt))
                 ]
              ;; Perform updates to reflect new holdings of liquidity pool shares and total token balance
              (set-holding *caller* (+ delta (or (get-holding *caller*) 0)))
              (def supply (+ supply delta))
              (def token-balance (+ token-balance amt))
              delta))
         
         (defn swap [coins tokens]
           (let [coins (long coins)
                 _ (assert (<= 0 coins 1000000000000000000))
                 tokens (long tokens)
                 _ (assert (<= 0 tokens))
                 old-tokens token-holding
                 old-coins *balance*
                 dt (- tokens old-tokens)
                 rate (calc-rate)
                 fee (* rate (abs dt))
                 
                 new-kk (* (double coins) (double tokens))
                 kk (* (double old-coins) (double old-tokens))
                 ])
           )
       
         (export add-liquidity price))
      ]))
  

  
    (export get-market create-market)
  )