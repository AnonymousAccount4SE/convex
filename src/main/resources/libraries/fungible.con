(do
  ;; Fungible library 
  ;;
  ;; deploy with: (deploy-once fungible-code)
  ;; 
  ;; import with (import <address of fungible> :as fungible)
  ;;
  ;; Key usage:
  ;;   (fungible/balance token)                        ;; Gets own balance (i.e. for *address*)
  ;;   (fungible/balance token other-address)          ;; Gets balance for another Address
  ;;   (fungible/transfer token target-address amount) ;; transfer to a new holder
  
  (call *registry* (register {:name "Fungible Library"}))
  
  (defn balance 
    ^{:doc {:description "Gets the balance from a fungible token. Checks the balance for the specified holder, or the current *address* if not specified."
         :examples [{:code "(balance my-token-address)"}]
         :type :function
         :signature [{:params [token holder]}]}
	  }
    [token holder]
    (call token (balance holder))) 
  
  (defn transfer 
    ^{:doc {:description "Transfers balance of a fungible token. Returns the amount transferred, or nil if the transfer fails."
         :examples [{:code "(balance my-token-address)"}]
         :type :function
         :signature [{:params [token holder]}]}
	  }
    [token target amount]
    (call token (transfer target amount))) 
  
  (defn build-token 
    ^{:doc {:description "Creates deployable code for a new fungible token. An optional config map can be provided"
         :examples [{:code "(deploy (build-token {:supply 1000000 :initial-holder *address*}))"}]
         :type :function
         :signature [{:params [config]}]}
	  }
    [config]
    (let [supply (long (or (:supply config) 1000000))
          initial-holder (address (or (:initial-holder config) *address*))]
      '(do
         (def supply ~supply)
         
         (set-holding ~initial-holder ~supply)
         
         (defn balance [addr]
            (or (get-holding addr) 0))
       
         (defn transfer [addr amount]
           (let [addr (address addr)
                 amount (long amount)
                 bal (or (get-holding *caller*) 0)
                 tbal (or (get-holding addr) 0)]
             (assert (<= 0 amount bal)) ;; amount must be in valid range
             (set-holding *caller* (- bal amount))
             (set-holding addr (+ tbal amount))
             ))
       
         (export transfer balance))))
  
  
  )