;;(import convex.asset :as asset)
;;(import convex.nft-tokens :as nft)
;;(def nft (get *aliases* 'nft))

;; Testing with one account
(do
  (def t1 (call nft (create-token {:name "Token1", :uri "http://www.mysite.com"} nil)))
  (assert (asset/owns? *address* [nft t1]))
  (assert (subset? #{t1} (asset/balance nft *address*)))
  (assert (= (call nft (get-token-creator t1)) *address*))
  (assert (= (call nft (get-token-owner t1)) *address*))
  (assert (= (call nft (get-token-data t1)) {:name "Token1", :uri "http://www.mysite.com"}))
  (assert (= (call nft (get-token-class t1)) nil))
  (assert (= (call nft (get-uri t1)) "http://www.mysite.com"))
  (assert (call nft (check-trusted? *address* :destroy t1)))
  (assert (call nft (check-trusted? *address* :update t1)))
  (assert (call nft (check-trusted? *address* :transfer t1)))
  (assert (call nft (check-trusted? *address* [:update :name] t1)))
  (call nft (merge-token-data t1 {:name "token1"}))
  (assert (= (call nft (get-token-data t1)) {:name "token1", :uri "http://www.mysite.com"}))
  (call nft (set-token-data t1 {:name "token1"}))
  (assert (= (call nft (get-token-data t1)) {:name "token1"}))
  (assert (= (call nft (check-transfer *address* nil t1)) nil))
  (assert (= (call nft (check-transfer *address* nil -1)) "No right to transfer token -1"))
  (call nft (destroy-token t1))
  (assert (not (asset/owns? *address* [nft t1])))
  (assert (not (subset? #{t1} (asset/balance nft *address*))))
  (assert (nil? (get nft/token-records t1))))