;; Example token implementation
(fn [seed   ;; a random number
     supply ;; total token supply for smart contract
     owner  ;; initial owner of all the tokens
     ] 
   (assert (address? owner) (long? supply) (> supply 0))
  `(do
		;; assets to set up the contract safely
		
				
	  ;; initial balances
	  (def balances {~owner ~supply})
					
	  ;;transfer function
	  (defn transfer [target amount] 
	    (assert (address? target) (long? amount) (<= 0 amount (balances *caller*)))
	    (if (not (= target *caller*))
	      (let [srcbal (balances *caller*)
	            dstbal (balances target)
	            newbal (if dstbal (+ dstbal amount) amount)]
	        (def balances (assoc balances 
	                             *caller* (- srcbal amount) ;; new balance for caller
	                             target newbal              ;; new balance for target
	                             )))))
					
	  ;; a function that should never be called, not exported
	  (defn bad-function [] (def balances {}))
					
	  ;;return total supply
	  (defn total-supply [] ~supply)
					
	  ;; get balance, or 0 if no balance for specified address
	  (defn balance [acct] (let [b (balances acct)] (if b b 0)))
					
	  (export transfer balance total-supply)))